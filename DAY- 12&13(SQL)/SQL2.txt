1.Data Modification and query
Insert new records into a sample employees table.
Update the salary of employees with more than five years of experience.
Delete inactive customer records based on last login timestamps.

CREATE TABLE EMPLOYEE (
  emp_id INT PRIMARY KEY,
  emp_name VARCHAR(50),
  emp_salary INT,
  emp_experience INT,
  emp_login DATE
); 

INSERT INTO EMPLOYEE(emp_id, emp_name, emp_salary, emp_experience, emp_login)
VALUES
(1, 'Faizan', 30000, 5, '2025-06-10'),
(2, 'Rohit', 40000, 6, '2025-06-10'),
(3, 'Kishor', 50000, 7, '2025-05-9'); 

UPDATE EMPLOYEE SET emp_salary = 60000 
WHERE emp_experience > 5;

DELETE FROM EMPLOYEE WHERE emp_login < DATE_SUB(CURDATE(), INTERVAL 1 MONTH);


SELECT * FROM EMPLOYEE



2.CREATE TABLE COMPANY (
  company_id INT PRIMARY KEY,
  company_name VARCHAR(100)
);

CREATE TABLE EMPLOYEES (
  emp_id INT PRIMARY KEY,
  emp_name VARCHAR(50),
  emp_salary INT,
  emp_department VARCHAR(100),
  company_id INT
);

INSERT INTO COMPANY (company_id, company_name)
VALUES 
(1, 'Cognizant'),
(2, 'InnoWare');


INSERT INTO EMPLOYEES (emp_id, emp_name, emp_salary, emp_department, company_id)
VALUES
(1, 'Faizan', 30000, 'JAVA DEVELOPER', 1),
(2, 'Rohit', 40000, 'AI/ML ENGINEER', 1),
(3, 'Kishor', 50000, 'FULL STACK DEVELOPER', 2),
(4, 'Anjali', 35000, 'JAVA DEVELOPER', 1),
(5, 'Vikram', 25000, 'JAVA DEVELOPER', 2),
(6, 'Neha', 38000, 'AI/ML ENGINEER', 2);

-- Write a subquery to identify employees earning above department averages.
SELECT emp_id, emp_name, emp_salary, emp_department FROM EMPLOYEES E1
WHERE emp_salary > (
  SELECT AVG(emp_salary)
  FROM EMPLOYEES E2
  WHERE E2.emp_department = E1.emp_department
);


-- Apply aggregate functions (SUM, AVG) to compute company expenses.
SELECT C.company_name , AVG(E.emp_salary) as Average_Emp_Salary , SUM(E.emp_salary) as Total_expense from COMPANY AS C JOIN 
EMPLOYEES AS E ON C.company_id = E.company_id GROUP BY C.company_name;



-- Implement a CASE statement to categorize employees based on salary.
SELECT emp_id,emp_name,emp_salary,emp_department,
  CASE 
    WHEN emp_salary < 30000 THEN 'Low'
    WHEN emp_salary BETWEEN 30000 AND 45000 THEN 'Medium'
    ELSE 'High'
  END AS Salary_Category
FROM EMPLOYEES;



3.
CREATE TABLE EMPLOYEES (
  emp_id INT PRIMARY KEY,
  emp_name VARCHAR(50),
  emp_salary INT,
  emp_department VARCHAR(100)
);


INSERT INTO EMPLOYEES (emp_id, emp_name, emp_salary, emp_department)
VALUES
(1, 'Faizan', 55000, 'JAVA DEVELOPER'),
(2, 'Rohit', 40000, 'AI/ML ENGINEER'),
(3, 'Kishor', 52000, 'FULL STACK DEVELOPER'),
(4, 'Anjali', 15000, 'Sales'),
(5, 'Vikram', 20000, 'Sales'),
(6, 'Maaz', 50000, 'FULL STACK DEVELOPER'),
(7, 'Famiya', 60000, 'JAVA DEVELOPER'),
(8, 'Samuel', 70000, 'JAVA DEVELOPER'),
(9, 'Neha', 22000, 'Sales');



-- Before indexing
EXPLAIN ANALYZE
SELECT * FROM EMPLOYEES
WHERE emp_department = 'JAVA DEVELOPER';


CREATE INDEX indx_department ON EMPLOYEES(emp_department);

-- after indexing
EXPLAIN ANALYZE
SELECT * FROM EMPLOYEES
WHERE emp_department = 'JAVA DEVELOPER';


-- Activity 1 : Filter and Sort Employee Data
-- Run the following query:
-- SELECT name, department, salary
-- FROM employees
-- WHERE salary > 50000
-- ORDER BY name;
-- Task:
-- Modify this query to only show employees in the 'Sales' department.
   
   SELECT emp_name AS Name, emp_department AS department, emp_salary AS salary FROM EMPLOYEES WHERE emp_department='Sales';

-- Change the sort order to descending salary.
   SELECT emp_name AS Name, emp_department AS department, emp_salary AS salary FROM employees
   WHERE emp_salary > 50000
   ORDER BY emp_salary DESC;
   
   
  -- Activity 2: You’re a Data Engineer investigating employee compensation anomalies.
  -- Task:
  -- Write a query to find the top 3 highest-paid employees.
  
    SELECT emp_name AS Name, emp_salary AS Salary FROM EMPLOYEES
    ORDER BY emp_salary DESC
    LIMIT 3;

    
  -- Then, write another query to find employees whose salary is above the company average.
   SELECT emp_name AS Name , emp_salary AS Salary , emp_department AS Department FROM EMPLOYEES
   WHERE emp_salary > (SELECT AVG(emp_salary) FROM EMPLOYEES)



4.
-- Design & Query Your Own Mini-Database
-- Instructions:
-- Create 2–3 simple related tables (e.g., books, authors, publishers).
-- Insert your own sample data (3–5 rows per table).

  
CREATE TABLE Authors (
  auth_id INT PRIMARY KEY,
  auth_name VARCHAR(50),
  auth_birthyr INT
); 
 
CREATE TABLE Books (
    book_id INT PRIMARY KEY,
    title VARCHAR(150) NOT NULL,
    auth_id INT,
    publisher_id INT,
    genre VARCHAR(50),
    publication_year INT,
    price DECIMAL(8,2),
    pages INT
);

CREATE TABLE Publishers (
    publisher_id INT PRIMARY KEY,
    publisher_name VARCHAR(100) NOT NULL,
    founded_year INT
);

INSERT INTO Authors (auth_id, auth_name, auth_birthyr) VALUES
(1, 'Faizan', 2003),
(2, 'J.K. Rowling', 1965),
(3, 'Maria D-CRUZE', 1969);

INSERT INTO Publishers (publisher_id, publisher_name,founded_year) VALUES
(201, 'FA Presents',2006),
(202, 'Rowling Publishing',2013),
(203, 'Maria Publishing',2014);

INSERT INTO Books (book_id, title, auth_id, publisher_id, genre, publication_year, price, pages) VALUES
(101, 'A boy with Scar', 1, 201, 'Thriller', 2015, 399.99, 328),
(102, 'A Local Train', 1, 201, 'Horror', 2016, 399.99, 128),
(103, 'Butterfly in Glass', 2, 202, 'Scify', 2017, 499.99, 228),
(104, 'Home Sick', 3, 203, 'Thriller', 2018, 799.99, 428),
(105, 'Animal Farm', 2, 202, 'Political Attire', 2003, 889.99, 112);

-- Join books with authors.
SELECT b.book_id, b.title, a.auth_name ,b.genre, b.publication_year,  b.pages, b.price FROM Books AS b LEFT JOIN Authors AS a ON b.auth_id = a.auth_id; 

-- List top authors by number of books.
SELECT a.auth_id, a.auth_name, a.auth_birthyr,COUNT(b.book_id) AS total_books FROM Authors a
LEFT JOIN Books b ON a.auth_id = b.auth_id
GROUP BY a.auth_id
ORDER BY total_books DESC;

-- Filter books by genre or publication year.
SELECT b.title,a.auth_name,B.genre ,b.publication_year,b.pages,b.price FROM Books b
JOIN Authors a ON b.auth_id = a.auth_id
WHERE b.genre IN ('Thriller', 'Scify')
ORDER BY b.publication_year ASC;